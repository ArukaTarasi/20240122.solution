@{
    ViewData["Title"] = "Register";
}

<h1>Register</h1>
<div class="row">
    <div class="col-3"></div>
    <div class="col-6">
        <form id="userForm">
            <div class="mb-3">
                <label for="userName" class="form-label">姓名：</label>
                <input type="text" class="form-control" id="userName" name="Name">
            </div>
            <div class="mb-3">
                <label for="UserEmail" class="form-label">電子郵件：</label>
                <input type="email" class="form-control" id="UserEmail" name="Email">
            </div>
            <div class="mb-3">
                <label for="userAge" class="form-label">年紀：</label>
                <input type="number" class="form-control" id="userAge" name="Age">
            </div>
            <div class="mb-3">
                <label for="userAvatar" class="custom-file-label">頭像：</label>
                <input type="file" class="custom-file-input" id="userAvatar" name="Avatar">
            </div>
            <button id="button1" type="submit" class="btn btn-primary">送出</button>
        </form>
        <div class="alert alert-info" id="div1"></div>
    </div>
    <div class="col-3">
    </div>
</div>

@section Scripts
{
    <script>
        const btn = document.querySelector('#button1');
        // const txtName = document.querySelector('#userName');
        // const txtEmail = document.querySelector('#UserEmail');
        // const txtAge = document.querySelector('#userAge');
        const div1 = document.querySelector('#div1');
        const form = document.querySelector('#userForm');

        btn.addEventListener('click', async (event) => {
            event.preventDefault();// 防止submit表單提交

            // 透過 FormData 物件讀取資料
            const formData = new FormData(form);

            // 測試 input 內容
            // console.log(txtName.value);
            // console.log(txtEmail.value);
            // console.log(txtAge.value);

            // 實作1 讀取 input 內容並傳到後端
            // const url = `@Url.Content("~/api/register")?Name=${txtName}&Age=${txtAge}&Email=${txtEmail}`;
            // const response = await fetch(url);
            // const result = await response.text();
            // div1.innerHTML = datas;

            // 實作2 將 FormData 資料透過 Get 傳遞，沒有指定傳遞方式預設是 GET
            // formData.append("city", "中壢"); // append() 方法，在某個物件中添加一個數據
            // // 透過迴圈讀取檔案資料
            // for (const pair of formData.entries()) 
            // {
            //     console.log(`${pair[0]}, ${pair[1]}`);
            // }

            // 實作3 將 FormData 資料透過 POST 傳到 Server
            // const url = `@Url.Content("~/api/register")`;
            // const response = await fetch(url, {
            //     method: 'POST',// 指定 POST 方式
            //     body: formData // 傳遞資料存放到 body
            // });
            // const datas = await response.text();
            // div1.innerHTML = datas;

            //實作4 
            // 讀取上傳檔案
            // 透過迴圈讀取檔案資料
            // for (const pair of formData.entries())
            // {
            //     console.log(pair[0]);// 欄位
            //     console.log(pair[1]);// 值
            // }
            const url = `@Url.Content("~/api/register")`;
            const response = await fetch(url, {
                method: 'POST',// 指定 POST 方式
                body: formData // 傳遞資料存放到 body
            });
            const datas = await response.text();
            div1.innerHTML = datas;

            // console.log(event); // 檢查事件
            // console.log('btn clicked'); //檢查按鈕
        });

        // (async () => {
        //     const url = '@Url.Content("~/api/register")?Name=Tom&Age=30&Email=Tom@company.com';
        //     // const url = '@Url.Content("~/api/register")';//若沒有值，則使用ApiController的預設值string name,int age = 20
        //     const response = await fetch(url);
        //     const result = await response.text();
        //     console.log(url);
        // })();
    </script>
}